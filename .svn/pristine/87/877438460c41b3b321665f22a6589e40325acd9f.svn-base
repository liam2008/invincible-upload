const moment = require('moment');
const async = require('async');
const mongoose = require('mongoose');
const uuid = require('uuid');

const InvincibleDB = require('../models/invincible');

const purchasePlan = InvincibleDB.getModel('purchasePlan');
const purchasePlanDetail = InvincibleDB.getModel('purchasePlanDetail');
const config = InvincibleDB.getModel('config');
const user = InvincibleDB.getModel('user');

var Shared = require('../../shared/');
var ERROR_CODE = Shared.ERROR;

// var Schema = mongoose.Schema;

module.exports = {
    name: "purchasePlan",
    // 新增采购计划
    submit: function (req, res) {
        let planId;
        let detailsIdArr = [];
        async.waterfall([
            // plan_id的处理
            function (cb) {
                purchasePlan.find().sort({_id: -1}).exec(function (err, docs) {
                    let date = moment().format('YYYYMMDD');
                    if (err) console.error(err);
                    if ((docs instanceof Array && docs.length === 0) || docs[0].plan_id === undefined) {
                        planId = 'PCP' + date + '001';
                        cb(null);
                    } else {
                        // 注意日期格式的转换
                        let dbDate = moment(docs.createdAt).format('YYYY-MM-DD');
                        if (dbDate === moment().format('YYYY-MM-DD').toString()) {
                            let no = parseInt(docs[0].plan_id.slice(11)) + 1;
                            if (no.toString().length === 1) {
                                no = '00' + no;
                            } else {
                                no = '0' + no;
                            }
                            planId = 'PCP' + date + no;
                            cb(null);
                        } else {
                            planId = 'PCP' + date + '001';
                            cb(null);
                        }
                    }
                });
            },
            // 创建purchasePlanDetail数据
            function (cb) {
                async.eachSeries(req.body.details, function (item, cb) {
                    let detailsId = new mongoose.Types.ObjectId();
                    purchasePlanDetail.create({
                        _id: detailsId,
                        plan_id: planId,
                        product_id: mongoose.Types.ObjectId(item.product_id),
                        local_storage: item.local_storage,
                        fba_storage: item.fba_storage,
                        average_7: item.average_7,
                        average_30: item.average_30,
                        expected_sales: item.expected_sales,
                        local_transport: item.local_transport,
                        abroad_transport: item.abroad_transport,
                        prepare_period: item.prepare_period,
                        safety_stock: item.safety_stock,
                        purchase_amount: item.purchase_amount,
                        supplier: mongoose.Types.ObjectId(item.supplierId),
                        unit_cost: item.unit_cost,
                        estimate_production_days: item.estimate_production_days,
                        least_amount: item.least_amount,
                        advance_pay_rate: item.advance_pay_rate,
                        first_time: item.first_time,
                        remarks: item.remarks,
                        createdAt: moment().format('YYYY-MM-DD HH:mm:ss'),
                        updatedAt: moment().format('YYYY-MM-DD HH:mm:ss')
                    }, function (err) {
                        detailsIdArr.push(detailsId);
                        if (err) {
                            console.error(err);
                        } else {
                            cb(null);
                        }
                    });
                }, function (err) {
                    if (err) console.error(err);
                    cb(null, detailsIdArr);
                });
            },
            // 创建purchasePlan数据
            function (arr, cb) {
                let data = {
                    _id: new mongoose.Types.ObjectId(),
                    plan_id: planId,
                    status: req.body.status,
                    applicant: req.agent.id,
                    createdAt: moment().format('YYYY-MM-DD HH:mm:ss'),
                    updatedAt: moment().format('YYYY-MM-DD HH:mm:ss')
                };
                data.details = arr;
                purchasePlan.create(data, function (err) {
                    if (err) {
                        console.error(err);
                        res.json();
                    } else {
                        res.json(planId);
                    }
                });
            }
        ]);
    },
    //  首页展示
    show: function (req, res) {
        var subfilterPurchasePlan = req.subfilterPurchasePlan || {};
        var purchasePlanConfig = req.purchasePlanConfig || [];

        // purchasePlan查询条件
        let cons = {};
        // 忽略前面的多少条
        let datas = [];
        // 跳过的页数
        let skip = (req.query.currentPage - 1) * req.query.pageSize;
        // 每页的页数
        let limit = 10;
        if (req.query.plan_id) cons.plan_id = {$regex: req.query.plan_id};
        if (req.query.startTime) cons.createdAt = { $gte: req.query.startTime };
        if (req.query.endTime) cons.createdAt = { $lte: req.query.endTime };
        if (req.query.startTime && req.query.endTime) cons.createdAt = { $gte: req.query.startTime, $lte: req.query.endTime };
        if (req.query.status) cons.status = parseInt(req.query.status);
        let applicant = [];
        let operator = [];
        let supplyChain = [];

        async.series([
            // async.series
            function (cb) {
                // async.parallel
                async.parallel([
                    function (cb) {
                        if (req.query.applicant) {
                            user.find({ name: req.query.applicant }).select('_id').exec(function (err, docs) {
                                if (err) console.error(err);
                                applicant = docs;
                                cb(null);
                            });
                        } else {
                            cb(null);
                        }
                    },
                    function (cb) {
                        if (req.query.operator) {
                            user.find({ name: req.query.operator }).select('_id').exec(function (err, docs) {
                                if (err) console.error(err);
                                docs.forEach(function (item, index) {
                                    operator.push(item._id.toString());
                                });
                                cb(null);
                            });
                        } else {
                            cb(null);
                        }
                    },
                    function (cb) {
                        if (req.query.supplyChain) {
                            user.find({ name: req.query.supplyChain }).select('_id').exec(function (err, docs) {
                                if (err) console.error(err);
                                docs.forEach(function (item, index) {
                                    supplyChain.push(item._id.toString());
                                });
                                cb(null);
                            });
                        } else {
                            cb(null);
                        }
                    }
                ], function (err) {
                    if (err) console.error(err);
                    cb(null);
                });
                // ---async.parallel
            },
            function (cb) {
                async.waterfall([
                    // async.waterfall
                    function (cb) {
                        if ((operator instanceof Array && operator.length === 0) && (supplyChain instanceof Array && supplyChain.length === 0)) {
                            purchasePlan.find(cons)
                                .populate('applicant')
                                .populate({
                                    path: 'details',
                                    populate: [{ path: 'product_id' }, { path: 'supplier' }]
                                })
                                .skip(skip)
                                .limit(limit)
                                .exec(function (err, docs) {
                                    // console.log(docs)
                                    if (err) console.error(err);
                                    if (docs instanceof Array && docs.length === 0) {
                                        res.json({ datas: [], pageCount: 0 });
                                    }
                                    // 数据处理
                                    docs.forEach(function (item, index) {
                                        let data = {
                                            details: [],
                                            peoples: {}
                                        };
                                        data.plan_id = item.plan_id;
                                        data.status = item.status;
                                        data.peoples.applicant = item.applicant.name;
                                        for (let i = 0; i < item.details.length; i++) {
                                            let productInfo = {
                                                details: []
                                            };
                                            productInfo.details.productSku = item.details[i].product_id.store_sku;
                                            productInfo.details.productName = item.details[i].product_id.name_cn;
                                            data.details.push(productInfo);
                                        }
                                        datas.push(data);
                                    });
                                    res.json({ datas: datas, pageCount: Math.ceil(datas.length / 10) });
                                });
                        } else {
                            purchasePlan.find(cons)
                                .populate('applicant')
                                .populate({
                                    path: 'details',
                                    populate: [{ path: 'product_id' }, { path: 'supplier' }]
                                })
                                .exec(function (err, docs) {
                                    if (err) console.error(err);
                                    if (docs instanceof Array && docs.length === 0) {
                                        res.json({ datas: [], pageCount: 0 });
                                    }
                                    cb(null, docs);
                                });
                        }
                    },
                    function (param, cb) {
                        let _idArr = [];
                        for (let i = 0; i < param.length; i++) {
                            let history = {};
                            if (!(operator instanceof Array && operator.length === 0) && (supplyChain instanceof Array && supplyChain.length === 0)) {
                                for (let j = 0; j < param[i].history.length; j++) {
                                    if (param[i].history[j].data.beforeProcessing === 200) {
                                        console.log(param[i].history[j])
                                        if (!(operator.indexOf(param[i].history[j].handler.toString()) === -1)) {
                                            _idArr.push(param[i]._id);
                                            break;
                                        }
                                    }
                                }
                            }
                            if ((operator instanceof Array && operator.length === 0) && !(supplyChain instanceof Array && supplyChain.length === 0)) {
                                for (let j = 0; j < param[i].history.length; j++) {
                                    if (param[i].history[j].data.beforeProcessing === 300) {
                                        if (!(supplyChain.indexOf(param[i].history[j].handler.toString()) === -1)) {
                                            _idArr.push(param[i]._id);
                                            break;
                                        } else {
                                            continue;
                                        }
                                    }
                                }
                            }
                            if (!(operator instanceof Array && operator.length === 0) && !(supplyChain instanceof Array && supplyChain.length === 0)) {
                                let opIsExist = false;
                                let suIsExist = false;
                                for (let j = 0; j < param[i].history.length; j++) {
                                    // 判断运营审核是否匹配
                                    if (param[i].history[j].data.beforeProcessing === 300) {
                                        if (!(operator.indexOf(param[i].history[j].handler.toString()) === -1)) {
                                            opIsExist = true;
                                        } else {
                                            continue;
                                        }
                                    }
                                    // 判断供应链审核是否匹配
                                    if (param[i].history[j].data.beforeProcessing === 300) {
                                        if (!(supplyChain.indexOf(param[i].history[j].handler.toString()) === -1)) {
                                            suIsExist = true;
                                        } else {
                                            continue;
                                        }
                                    }
                                    // 如果均匹配，则存进数组
                                    if (opIsExist && suIsExist) {
                                        _idArr.push(param[i]._id);
                                        break;
                                    }
                                }
                            }
                        }
                        cb(null, _idArr);
                    },
                    function (_idArr, cb) {
                        console.log('_idArr', _idArr);
                        async.eachSeries(_idArr, function (item, cb) {
                            let data = {
                                details: [],
                                peoples: {}
                            };
                            purchasePlan.findOne({ _id: mongoose.Types.ObjectId(item) }).populate('history.handler')
                                .populate('applicant')
                                .populate({
                                    path: 'details',
                                    populate: [{ path: 'product_id' }, { path: 'supplier' }]
                                }).exec(function (err, docs) {
                                    if (err) console.error(err);
                                    data.plan_id = docs.plan_id;
                                    data.status = docs.status;
                                    for (let i = 0; i < docs.details.length; i++) {
                                        let productInfo = {
                                            details: []
                                        };
                                        productInfo.details.productSku = docs.details[i].product_id.store_sku;
                                        productInfo.details.productName = docs.details[i].product_id.name_cn;
                                        data.details.push(productInfo);
                                    }
                                    for (let i = 0; i < docs.history.length; i++) {
                                        if (docs.history[i].data.beforeProcessing === 200) {
                                            data.peoples.operator = docs.history[i].handler.name;
                                        }
                                        if (docs.history[i].data.beforeProcessing === 300) {
                                            data.peoples.supplyChain = docs.history[i].handler.name;
                                        }
                                        data.peoples.applicant = docs.applicant.name;
                                    }
                                    datas.push(data);
                                    cb(null);
                                });
                        }, function (err) {
                            if (err) {
                                console.error(err);
                            }
                            console.log('datas', datas);
                            // cb(null);
                            res.json({datas: datas, pageCount: Math.ceil(datas.length / 10)});
                        });
                    }
                ]);
                // ---async.waterfall
            }
        ]);
        // ---async.series
    },
    // 编辑页面展示
    editShow: function (req, res) {
        let planId = req.query.plan_id;
        purchasePlan.findOne({ plan_id: planId }).populate('applicant').populate({
            path: 'details',
            populate: [{ path: 'product_id' }, { path: 'supplier' }]
        }).exec(function (err, docs) {
            if (err) console.error(err);
            let datas = {
                plan_id: docs.plan_id,
                applicantName: docs.applicant.name,
                status: docs.status,
                details: [],
                reviews: []
            };
            docs.details.forEach(function (item, index) {
                var detail = {};
                detail._id = item._id;
                detail.productSku = item.product_id.store_sku;
                detail.productName = item.product_id.name_cn;
                detail.product_id = item.product_id._id;
                detail.local_storage = item.local_storage;
                detail.fba_storage = item.fba_storage;
                detail.average_7 = item.average_7;
                detail.average_30 = item.average_30;
                detail.expected_sales = item.expected_sales;
                detail.local_transport = item.local_transport;
                detail.abroad_transport = item.abroad_transport;
                detail.prepare_period = item.prepare_period;
                detail.safety_stock = item.safety_stock;
                detail.purchase_amount = item.purchase_amount;
                detail.supplierName = item.supplier.name;
                detail.supplierId = item.supplier._id;
                detail.unit_cost = item.unit_cost;
                detail.estimate_production_days = item.estimate_production_days;
                detail.least_amount = item.least_amount;
                detail.advance_pay_rate = item.advance_pay_rate;
                detail.first_time = item.first_time;
                detail.remarks = item.remarks;
                datas.details.push(detail);
            });
            // 处理采购计划状态和意见
            for (let i = 0; i < docs.history.length; i++) {
                let operatorId, supplyChainId;
                let cur = {};
                // 运营部同意
                if (docs.history[i].data.beforeProcessing === 200 && docs.history[i].data.afterProcessing === 300) {
                    cur.status = 1;
                    cur.operator = docs.history[i].data.log;
                }
                // 运营部不同意
                if (docs.history[i].data.beforeProcessing === 200 && docs.history[i].data.afterProcessing === 101) {
                    cur.status = 0;
                    cur.operator = docs.history[i].data.log;
                }
                // 供应链同意
                if (docs.history[i].data.beforeProcessing === 300 && docs.history[i].data.afterProcessing === 400) {
                    cur.status = 1;
                    cur.supplyChain = docs.history[i].data.log;
                }
                // 供应链不同意
                if (docs.history[i].data.beforeProcessing === 300 && docs.history[i].data.afterProcessing === 101) {
                    cur.status = 0;
                    cur.supplyChain = docs.history[i].data.log;
                }
                datas.reviews.push(cur);
            }
            res.json(datas);
        });
    },
    // 编辑页面提交
    editSubmit: function (req, res) {
        // 当前purchaseDetail的_id
        let cur_id = [];
        // 数据库purchaseDetail的_id
        let db_id = [];
        // 编辑后共有的_id
        let pubArr = [];
        // 编辑后新建的_id
        let priArr = [];
        // 编辑后共有的_id对应的数据
        let pub = [];
        // 编辑后新建的_id对应的数据
        let pri = [];
        async.series([
            function (cb) {
                // 取当前的product_id数组
                req.body.details.forEach(function (item, index) {
                    cur_id.push(item._id);
                });
                // 取数据库的product_id数组
                purchasePlan.findOne({ plan_id: req.body.plan_id }).populate('details').exec(function (err, docs) {
                    if (err) console.error(err);
                    docs.details.forEach(function (item, index) {
                        db_id.push(item._id.toString());
                    });
                    cb(null);
                });
            },
            // 删除product_id不存在的数据
            function (cb) {
                async.eachSeries(db_id, function (item, cb) {
                    if (cur_id.indexOf(item) === -1) {
                        purchasePlanDetail.remove({ _id: item }).exec(function (err, docs) {
                            if (err) console.error(err);
                            cb(null);
                        });
                    } else {
                        cb(null);
                    }
                }, function (err) {
                    if (err) console.error(err);
                    cb(null);
                });
            },
            // 在purchasePlan删除product_id对应的pruchasePlanDetail的_id
            function (cb) {
                async.eachSeries(db_id, function (item, cb) {
                    if (cur_id.indexOf(item) === -1) {
                        purchasePlan.update({ plan_id: req.body.plan_id }, { '$pull': { 'details': item } }, function (err, docs) {
                            if (err) console.error(err);
                            cb(null);
                        });
                    } else {
                        cb(null);
                    }
                });
                cb(null);
            },
            // 数组处理，取交集和差集，交集(pub)update，差集(pri)create
            function (cb) {
                for (let i = 0; i < cur_id.length; i++) {
                    if (db_id.indexOf(cur_id[i]) !== -1) {
                        pubArr.push(cur_id[i]);
                    } else {
                        priArr.push(cur_id[i]);
                    }
                }
                // 数据处理
                for (let i = 0; i < req.body.details.length; i++) {
                    if (pubArr.indexOf(req.body.details[i]._id) !== -1) {
                        let obj = {};
                        obj._id = mongoose.Types.ObjectId(req.body.details[i]._id);
                        obj.product_id = mongoose.Types.ObjectId(req.body.details[i].product_id);
                        obj.plan_id = req.body.plan_id;
                        obj.abroad_transport = req.body.details[i].abroad_transport;
                        obj.advance_pay_rate = req.body.details[i].advance_pay_rate;
                        obj.amount = req.body.details[i].amount;
                        obj.average_7 = req.body.details[i].average_7;
                        obj.average_30 = req.body.details[i].average_30;
                        obj.estimate_production_days = req.body.details[i].estimate_production_days;
                        obj.expected_sales = req.body.details[i].expected_sales;
                        obj.fba_storage = req.body.details[i].fba_storage;
                        obj.first_time = req.body.details[i].first_time;
                        obj.least_amount = req.body.details[i].least_amount;
                        obj.local_storage = req.body.details[i].local_storage;
                        obj.local_transport = req.body.details[i].local_transport;
                        obj.prepare_period = req.body.details[i].prepare_period;
                        obj.purchase_amount = req.body.details[i].purchase_amount;
                        obj.remarks = req.body.details[i].remarks;
                        obj.safety_stock = req.body.details[i].safety_stock;
                        obj.supplierId = mongoose.Types.ObjectId(req.body.details[i].supplierId);
                        obj.total = req.body.details[i].total;
                        obj.unit_cost = req.body.details[i].unit_cost;
                        obj.updatedAt = moment().format('YYYY-MM-DD HH:mm:ss');
                        pub.push(obj);
                    }
                    if (priArr.indexOf(req.body.details[i]._id) !== -1) {
                        let obj = {};
                        obj._id = new mongoose.Types.ObjectId();
                        obj.product_id = mongoose.Types.ObjectId(req.body.details[i].product_id);
                        obj.plan_id = req.body.plan_id;
                        obj.abroad_transport = req.body.details[i].abroad_transport;
                        obj.advance_pay_rate = req.body.details[i].advance_pay_rate;
                        obj.amount = req.body.details[i].amount;
                        obj.average_7 = req.body.details[i].average_7;
                        obj.average_30 = req.body.details[i].average_30;
                        obj.estimate_production_days = req.body.details[i].estimate_production_days;
                        obj.expected_sales = req.body.details[i].expected_sales;
                        obj.fba_storage = req.body.details[i].fba_storage;
                        obj.first_time = req.body.details[i].first_time;
                        obj.least_amount = req.body.details[i].least_amount;
                        obj.local_storage = req.body.details[i].local_storage;
                        obj.local_transport = req.body.details[i].local_transport;
                        obj.prepare_period = req.body.details[i].prepare_period;
                        obj.purchase_amount = req.body.details[i].purchase_amount;
                        obj.remarks = req.body.details[i].remarks;
                        obj.safety_stock = req.body.details[i].safety_stock;
                        obj.supplier = mongoose.Types.ObjectId(req.body.details[i].supplierId);
                        obj.total = req.body.details[i].total;
                        obj.unit_cost = req.body.details[i].unit_cost;
                        obj.updatedAt = moment().format('YYYY-MM-DD HH:mm:ss');
                        obj.createdAt = moment().format('YYYY-MM-DD HH:mm:ss');
                        pri.push(obj);
                    }
                }
                cb(null);
            },
            // 将共有的数据进行更新
            function (cb) {
                async.eachSeries(pub, function (item, cb) {
                    purchasePlanDetail.update({ _id: mongoose.Types.ObjectId(item._id) }, item, function (err, docs) {
                        if (err) console.error(err);
                        cb(null);
                    });
                }, function (err) {
                    if (err) console.error(err);
                    cb(null);
                });
            },
            // 将新建的数据进行创建
            function (cb) {
                async.eachSeries(pri, function (item, cb) {
                    purchasePlanDetail.create(item, function (err, docs) {
                        if (err) console.error(err);
                        purchasePlan.update({ plan_id: req.body.plan_id }, { $addToSet: { 'details': item._id } }, function (err, docs) {
                            if (err) console.error(err);
                            cb(null);
                        });
                    });
                }, function (err) {
                    if (err) console.error(err);
                    cb(null);
                });
            },
            // 更新状态
            function (cb) {
                purchasePlan.update({ plan_id: req.body.plan_id }, { status: req.body.status }, function (err, docs) {
                    if (err) console.error(err);
                    res.json('ok');
                });
            }
        ]);
    },
    // 审核
    review: function (req, res) {
        let curStatus = req.body.status;
        let review = {
            data: {}
        };
        // 记录审核前和审核后的状态
        if (curStatus === 200) {
            if (parseInt(req.body.review.status) === 1) {
                review.data.afterProcessing = 300;
            } else {
                review.data.afterProcessing = 101;
            }
            review.data.beforeProcessing = 200;
            review.data.log = req.body.review.remark;
            review.handler = mongoose.Types.ObjectId(req.agent.id);
            // review.id = uuid.v4();
            review.time = moment().format('YYYY-MM-DD HH:mm:ss');
        } else if (curStatus === 300) {
            if (parseInt(req.body.review.status) === 1) {
                review.data.afterProcessing = 400;
            } else {
                review.data.afterProcessing = 101;
            }
            review.data.beforeProcessing = 300;
            review.data.log = req.body.review.remark;
            review.handler = mongoose.Types.ObjectId(req.agent.id);
            // review.id = uuid.v4();
            review.time = moment().format('YYYY-MM-DD HH:mm:ss');
        } else {
            throw new Error('status error');
        }
        // 更新
        purchasePlan.update({ plan_id: req.body.plan_id }, {
            status: review.data.afterProcessing,
            '$push': {'history': review},
            updatedAt: moment().format('YYYY-MM-DD HH:mm:ss')
        }, function (err, docs) {
            if (err) console.error(err);
            res.send(true);
        });
    }
};