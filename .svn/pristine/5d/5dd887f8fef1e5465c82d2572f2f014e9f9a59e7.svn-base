"user strict";

const moment = require('moment');
const async = require('async');
const mongoose = require('mongoose');
const uuid = require('uuid');

const InvincibleDB = require('../models/invincible');

const purchasePlan = InvincibleDB.getModel('purchasePlan');
const purchasePlanDetail = InvincibleDB.getModel('purchasePlanDetail');
const config = InvincibleDB.getModel('config');
const user = InvincibleDB.getModel('user');

var debug = require('debug')('smartdo:controller:purchasePlan');

var Shared = require('../../shared/');
var Utils = Shared.Utils;
var ERROR_CODE = Shared.ERROR;

// 判断当前采购计划属于哪一个流程步骤，返回流程
var procedure = function(item, purchasePlanConfig) {
    var money = item.total || 0;
    var details = item.details || null;
    var status = item.status || 100;

    if (!Utils.isArray(details)) {
        return {};
    }

    let firstTime = false;
    var len = details.length;
    for (var i = 0; i < len; i++) {
        var item = details[i];
        if (item.first_time === '是') {
            firstTime = true;
            break;
        }
    }

    var index = 0;

    // 运营段
    if (Math.floor(status/100) != 3) {
        //是否第一次采购
        if (firstTime) {
            for (index = 0; index < purchasePlanConfig.length; index++) {
                let row = purchasePlanConfig[index];
                if (money >= row.intervalGotNew[0] && money < row.intervalGotNew[1]) {
                    return row;
                }
            }
            return {};
        }
        else {
            for (index = 0; index < purchasePlanConfig.length; index++) {
                let row = purchasePlanConfig[index];
                if (money >= row.intervalNoNew[0] && money < row.intervalNoNew[1]) {
                    return row;
                }
            }
            return {};
        }
    }
    // 采购段
    else {
        for (index = 0; index < purchasePlanConfig.length; index++) {
            let row = purchasePlanConfig[index];
            if (money >= row.intervalPurchase[0] && money < row.intervalPurchase[1]) {
                return row;
            }
        }
        return {};
    }
};

module.exports = {
	name: "purchasePlan",

	// 新增采购计划
	submit: function(req, res) {
		let planId;
		let detailsIdArr = [];
		async.waterfall([
			// plan_id的处理
			function(cb) {
				purchasePlan.find().sort({
					_id: -1
				}).exec(function(err, docs) {
					let date = moment().format('YYYYMMDD');
					if(err) console.error(err);
					if((docs instanceof Array && docs.length === 0) || docs[0].plan_id === undefined) {
						planId = 'PCP' + date + '001';
						cb(null);
					} else {
						// 注意日期格式的转换
						let dbDate = moment(docs[0].createdAt).format('YYYY-MM-DD');
						if(dbDate === moment().format('YYYY-MM-DD').toString()) {
							let no = (parseInt(docs[0].plan_id.slice(11)) + 1).toString();
							if(no.toString().length === 1) {
								no = '00' + no;
							} else {
								no = '0' + no;
							}
							planId = 'PCP' + date + no;
							cb(null);
						} else {
							planId = 'PCP' + date + '001';
							cb(null);
						}
					}
				});
			},
			// 创建purchasePlanDetail数据
			function(cb) {
				async.eachSeries(req.body.details, function(item, cb) {
					let detailsId = new mongoose.Types.ObjectId();
					purchasePlanDetail.create({
						_id: detailsId,
						plan_id: planId,
						product_id: mongoose.Types.ObjectId(item.product_id),
						local_storage: item.local_storage,
						fba_storage: item.fba_storage,
						average_7: item.average_7,
						average_30: item.average_30,
						expected_sales: item.expected_sales,
						local_transport: item.local_transport,
						abroad_transport: item.abroad_transport,
						prepare_period: item.prepare_period,
						safety_stock: item.safety_stock,
						purchase_amount: item.purchase_amount,
						supplier: mongoose.Types.ObjectId(item.supplierId),
						unit_cost: item.unit_cost,
						estimate_production_days: item.estimate_production_days,
						least_amount: item.least_amount,
						advance_pay_rate: item.advance_pay_rate,
						first_time: item.first_time,
						remarks: item.remarks,
						createdAt: moment().format('YYYY-MM-DD HH:mm:ss'),
						updatedAt: moment().format('YYYY-MM-DD HH:mm:ss')
					}, function(err) {
						detailsIdArr.push(detailsId);
						if(err) {
							console.error(err);
						} else {
							cb(null);
						}
					});
				}, function(err) {
					if(err) console.error(err);
					cb(null, detailsIdArr);
				});
			},
			// 创建purchasePlan数据
			function(arr, cb) {
				let data = {
					_id: new mongoose.Types.ObjectId(),
					plan_id: planId,
					status: req.body.status,
					total: req.body.total,
					applicant: req.agent.id,
					createdAt: moment().format('YYYY-MM-DD HH:mm:ss'),
					updatedAt: moment().format('YYYY-MM-DD HH:mm:ss')
				};
				data.details = arr;
				purchasePlan.create(data, function(err) {
					if(err) {
						console.error(err);
						res.json();
					} else {
						res.json(planId);
					}
				});
			}
		]);
	},
	//  首页展示
	show: function(req, res) {
		const subfilterPurchasePlan = req.subfilterPurchasePlan || {};
		const purchasePlanConfig = req.purchasePlanConfig || [];
		const queryInfo = req.query || {};
		// purchasePlan查询条件
		let cons = {};
		// 忽略前面的多少条
		let datas = [];
		// 跳过的页数
		let skip = (queryInfo.currentPage - 1) * queryInfo.pageSize;
		// 每页的页数
		let limit = 10;
		// 保存的符合条件的_id
		if(queryInfo.plan_id) cons.plan_id = {
			$regex: queryInfo.plan_id
		};
		if(queryInfo.startTime) cons.createdAt = {
			$gte: new Date(queryInfo.startTime)
		};
		if(queryInfo.endTime) cons.createdAt = {
			$lte: new Date(queryInfo.endTime)
		};
		if(queryInfo.startTime && queryInfo.endTime) {
			// 在当前的日期上加一天
			let date = new Date(queryInfo.endTime);
			date.setDate(date.getDate() + 1);
			cons.createdAt = {
				$gte: new Date(queryInfo.startTime),
				$lte: new Date(date)
			};
		}
		let operator;
		let supplyChain;
		if(queryInfo.applicant) cons.applicant = queryInfo.applicant.toString();
		if(queryInfo.operator) operator = queryInfo.operator.toString();
		if(queryInfo.supplyChain) supplyChain = queryInfo.supplyChain.toString();

		let statusIn = null;
        if (queryInfo.status) {
        	statusIn = [parseInt(queryInfo.status)];
		} else {
            switch (queryInfo.workbench) {
                case '1': {
                    statusIn = subfilterPurchasePlan.edit.status || [];
                    break;
                }
                case '2': {
                	statusIn = subfilterPurchasePlan.view.status || [];
                	break;
                }
            	case '3': {
                    statusIn = [400];
                    break;
                }
                default: {
                    statusIn = subfilterPurchasePlan.edit.status || [];
                    break;
                }
            }
        }
           
        if (statusIn != "*") {
            cons.status = {$in: statusIn || []};
        } else {
		    cons.status = {$ne: 400};
        }

		// 先将不能够显示的数据筛选出来
		purchasePlan.find(cons)
			.populate('applicant')
			.populate('history.handler')
			.populate({
				path: 'details',
				populate: [{
					path: 'product_id'
				}, {
					path: 'supplier'
				}]
			})
			.exec(function(err, total) {
				if(err) console.error(err);
				let id = [];
				total.forEach(function(item) {
					let thisConfig = procedure(item, purchasePlanConfig);
					let show = false;
					for(let i = 0; i < thisConfig.handlerTypes.length; i++) {
						switch(req.agent.role.type) {
							case 'leader':
								{
									// console.log('subfilterPurchasePlan.view.applicant.indexOf(item.applicant._id.toString()) !== -1', subfilterPurchasePlan.view.applicant.indexOf(item.applicant._id.toString()) !== -1)
									if(subfilterPurchasePlan.view.applicant.indexOf(item.applicant._id.toString()) !== -1) {
										show = true;
									}
									if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1 && subfilterPurchasePlan.view.applicant.indexOf(item.applicant._id.toString()) !== -1) {
										show = true;
									}
									break;
								}
							case 'member':
								{
									if(req.agent.id === item.applicant._id.toString()) {
										show = true;
									}
									if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1 && req.agent.id === item.applicant._id.toString()) {
										show = true;
									}
									break;
								}
							case 'director':
								{
									show = true;
									break;
								}
							case 'manager':
								{
									show = true;
									break;
								}
							case 'COO':
								{
									show = true;
									break;
								}
							case 'CEO':
								{
									show = true;
									break;
								}
							case 'purchaseDirector':
								{
									show = true;
									break;
								}
							case 'CFO':
							case 'CMPO':
								{
									show = true;
									break;
								}
							case 'admin':
								{
									show = true;
									break;
								}
							default:
								{
									show = false;
									break;
								}
						}
					}
					if(show && id.indexOf(item._id.toString()) === -1) {
						id.push(item._id);
					}
				});
				// 需要分页的数量
				let count = id.length;
				// 需要显示的purchasePlan的_id
				cons._id = {
					$in: id
				};
				purchasePlan.find(cons).sort({
						_id: -1
					})
					.populate('applicant')
					.populate('history.handler')
					.populate({
						path: 'details',
						populate: [{
							path: 'product_id'
						}, {
							path: 'supplier'
						}]
					})
					.skip(skip).limit(limit)
					.exec(function(err, docs) {
						if(err) console.error(err);
						let datas = [];
						let add = false;
						if(['leader', 'member', 'admin'].indexOf(req.agent.role.type) != -1) {
							add = true
						}
						if(docs instanceof Array && docs.length === 0) {
							res.json({
								datas: [],
								pageCount: 0,
								add: add
							});
						}
						docs.forEach(function(item) {
							// 权限控制
							let permission = {
								view: {}
							};
							// 当前流程下标
							let thisConfig = procedure(item, purchasePlanConfig);
							// 判断当条是否显示
							// 循环当前当前流程的所有步骤
							for(let i = 0; i < thisConfig.handlerTypes.length; i++) {
								permission.view = true;
								// 根据不同的职位安排不同的流程
								switch(req.agent.role.type) {
									case 'leader':
										{
											permission.review = false;
											// 如果当前item是他或者他的组员创建的 则可看
											if(subfilterPurchasePlan.view.applicant.indexOf(item.applicant._id.toString()) !== -1) {
												permission.view = true;
											} else {
												permission.view = false;
											}
											// 如果当前的状态是100或者101而且当前purchasePlan是他或者他的组员创建的 则可编辑
											if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1 && subfilterPurchasePlan.view.applicant.indexOf(item.applicant._id.toString()) !== -1) {
												permission.edit = true;
											} else {
												permission.edit = false;
											}
											break;
										}
									case 'member':
										{
											permission.review = false;
											if(req.agent.id === item.applicant._id.toString()) {
												permission.view = true;
											} else {
												permission.view = false;
											}
											if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1 && req.agent.id === item.applicant._id.toString()) {
												permission.edit = true;
											} else {
												permission.edit = false;
											}
											break;
										}
									case 'director':
										{
											if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1) {
												permission.review = true;
											} else {
												permission.review = false;
											}
											permission.edit = false;
											break;
										}
									case 'manager':
										{
											permission.edit = false;
											if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1) {
												permission.review = true;
											} else {
												permission.review = false;
											}
											break;
										}
									case 'COO':
										{
											permission.edit = false;
											if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1) {
												permission.review = true;
											} else {
												permission.review = false;
											}
											break;
										}
									case 'CEO':
										{
											permission.edit = false;
											if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1) {
												permission.review = true;
											} else {
												permission.review = false;
											}
											break;
										}
									case 'purchaseDirector':
										{
											permission.edit = false;
											if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1) {
												permission.review = true;
											} else {
												permission.review = false;
											}
											break;
										}
									case 'CFO':
									case 'CMPO':
										{
											permission.edit = false;
											if(subfilterPurchasePlan.edit.status.indexOf(item.status) !== -1) {
												permission.review = true;
											} else {
												permission.review = false;
											}
											break;
										}
									case 'admin':
										{
											permission.edit = true;
											permission.review = true;
											break;
										}
									default:
										{
											permission.edit = false;
											permission.review = false;
											break;
										}
								}
							}
							//
							let opIsExist = false;
							let suIsExist = false;
							let data = {
								plan_id: item.plan_id,
								status: item.status,
								peoples: {
									applicant: item.applicant.name,
									supplyChain: [],
									operator: []
								},
								details: [],
								permission: permission
							};
							// 把details保存起来
							for(let j = 0; j < item.details.length; j++) {
								let detail = {};
								detail.productSku = item.details[j].product_id.store_sku;
								detail.productName = item.details[j].product_id.name_cn;
								detail.log = item.details[j].remarks;
								data.details.push(detail);
							}
							// 记录为空的数据的处理
							if(!(operator || supplyChain)) {
								if(item.history instanceof Array && item.history.length === 0) {
									datas.push(data);
								}
							}
							// 记录不为空的数据的处理
							for(let i = 0; i < item.history.length; i++) {
								// 搜索条件只填了运营审核人没有填供应链审核人
								if(operator && !supplyChain) {
									// 首数字为2则证明是运营部门的审核，为3则证明是供应链部门的审核
									if(Math.floor(item.history[i].data.beforeProcessing / 100) === 2) {
										if(operator === item.history[i].handler._id.toString()) {
											// 保存此条purchasePlan
											let index = 0;
											for(let j = 0; j < item.history.length; j++) {
												if(item.history[j].data.beforeProcessing === 200) {
													index = j;
												}
											}
											for(let j = index; j < item.history.length; j++) {
												// 判断是否为供应链审核而且当前状态要大于历史查询的状态 或者 当前状态为已退回且当前为供应链审核(控制首页经手人的显示) 如此类推
												if((Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.status === 101)) {
													data.peoples.operator.push(item.history[j].handler.name);
												}
												if((Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.status === 101)) {
													data.peoples.supplyChain.push(item.history[j].handler.name);
												}
											}
											datas.push(data);
										}
									}
									// 搜索条件只填了供应链核人没有填运营审核人
								} else if(!operator && supplyChain) {
									if(Math.floor(item.history[i].data.beforeProcessing / 100) === 3) {
										if(supplyChain === item.history[i].handler._id.toString()) {
											// 保存此条purchasePlan
											let index = 0;
											for(let j = 0; j < item.history.length; j++) {
												if(item.history[j].data.beforeProcessing === 200) {
													index = j;
												}
											}
											for(let j = index; j < item.history.length; j++) {
												if((Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.status === 101)) {
													data.peoples.operator.push(item.history[j].handler.name);
												}
												if((Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.status === 101)) {
													data.peoples.supplyChain.push(item.history[j].handler.name);
												}
											}
											datas.push(data);
										}
									}
									//  搜索条件均填了供应链审核人和运营审核人
								} else if(operator && supplyChain) {
									let index = 0;
									for(let j = 0; j < item.history.length; j++) {
										if(item.history[j].data.beforeProcessing === 200) {
											index = j;
										}
									}
									for(let j = index; j < item.history.length; j++) {
										if((Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.status === 101)) {
											if(operator === item.history[i].handler._id.toString()) {
												opIsExist = true;
											}
										}
										if((Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.status === 101)) {
											if(supplyChain === item.history[i].handler._id.toString()) {
												suIsExist = true;
											}
										}
									}
									if(opIsExist && suIsExist) {
										// 保存此条数据
										let index = 0;
										for(let j = 0; j < item.history.length; j++) {
											if(item.history[j].data.beforeProcessing === 200) {
												index = j;
											}
										}
										for(let j = index; j < item.history.length; j++) {
											if((Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.status === 101)) {
												data.peoples.supplyChain.push(item.history[j].handler.name);
											}
											if((Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.status === 101)) {
												data.peoples.operator.push(item.history[j].handler.name);
											}
										}
										datas.push(data);
										break;
									}
									// 运营审核人和供应链审核人均为空
								} else {
									if(item.history instanceof Array && item.history.length === 0) {
										datas.push(data);
									} else {
										let index = 0;
										for(let j = 0; j < item.history.length; j++) {
											if(item.history[j].data.beforeProcessing === 200) {
												index = j;
											}
										}
										for(let j = index; j < item.history.length; j++) {
											if((Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 3 && item.status === 101)) {
												data.peoples.supplyChain.push(item.history[j].handler.name);
											}
											if((Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.history[j].data.beforeProcessing < item.status) || (Math.floor(item.history[j].data.beforeProcessing / 100) === 2 && item.status === 101)) {
												data.peoples.operator.push(item.history[j].handler.name);
											}
										}
										datas.push(data);
										break;
									}
								}
							}
						});
						res.json({
							datas: datas,
							pageCount: Math.ceil(count / queryInfo.pageSize),
							add: add
						});
					});
			});
	},
	// 首页返回peoples
	getPeoples: function(req, res) {
		// 返回所有申请过的人和审核过的人作为搜索条件
		purchasePlan.find().populate('applicant').populate('history.handler').exec(function(err, docs) {
			if(err) console.error(err);
			let applicant = [];
			let operator = [];
			let supplyChain = [];
			let id1 = [];
			let id2 = [];
			let id3 = [];
			docs.forEach(function(item, index) {
				let data1 = {
					name: item.applicant.name,
					_id: item.applicant._id.toString()
				};
				// 保存申请过的申请人
				if(id1.indexOf(item.applicant._id.toString()) === -1) {
					id1.push(item.applicant._id.toString());
					applicant.push(data1);
				}
				for(let i = 0; i < item.history.length; i++) {
					let data2 = {
						name: item.history[i].handler.name,
						_id: item.history[i].handler._id.toString()
					};
					// 保存运营部审核过的审核人
					if(id2.indexOf(item.history[i].handler._id.toString()) === -1) {
						if((Math.floor(item.history[i].data.beforeProcessing / 100) === 2)) {
							id2.push(item.history[i].handler._id.toString());
							operator.push(data2);
						}
					}
					// 保存供应链审核过的审核人
					if(id3.indexOf(item.history[i].handler._id.toString()) === -1) {
						if((Math.floor(item.history[i].data.beforeProcessing / 100) === 3)) {
							id3.push(item.history[i].handler._id.toString());
							supplyChain.push(data2);
						}
					}
				}
			});
			res.json({
				applicant: applicant,
				operator: operator,
				supplyChain: supplyChain
			});
		});
	},
	// 编辑页面展示
	editShow: function(req, res) {
		let planId = req.query.plan_id;
		purchasePlan.findOne({
			plan_id: planId
		}).populate('applicant').populate('history.handler').populate({
			path: 'details',
			populate: [{
				path: 'product_id'
			}, {
				path: 'supplier'
			}]
		}).exec(function(err, docs) {
			if(err) console.error(err);
			let datas = {
				plan_id: docs.plan_id,
				applicantName: docs.applicant.name,
				status: docs.status,
				details: [],
				reviews: []
			};
			docs.details.forEach(function(item, index) {
				var detail = {};
				detail._id = item._id;
				detail.productSku = item.product_id.store_sku;
				detail.productName = item.product_id.name_cn;
				detail.product_id = item.product_id._id;
				detail.local_storage = item.local_storage;
				detail.fba_storage = item.fba_storage;
				detail.average_7 = item.average_7;
				detail.average_30 = item.average_30;
				detail.expected_sales = item.expected_sales;
				detail.local_transport = item.local_transport;
				detail.abroad_transport = item.abroad_transport;
				detail.prepare_period = item.prepare_period;
				detail.safety_stock = item.safety_stock;
				detail.purchase_amount = item.purchase_amount;
				detail.supplierName = item.supplier.name;
				detail.supplierId = item.supplier._id;
				detail.unit_cost = item.unit_cost;
				detail.estimate_production_days = item.estimate_production_days;
				detail.least_amount = item.least_amount;
				detail.advance_pay_rate = item.advance_pay_rate;
				detail.first_time = item.first_time;
				detail.remarks = item.remarks;
				datas.details.push(detail);
			});
			// 处理采购计划状态和意见
			for(let i = 0; i < docs.history.length; i++) {
				let cur = {};
				if(docs.history[i].data.afterProcessing === 101) {
					cur.agree = 0;
					cur.log = docs.history[i].data.log;
					cur.status = docs.history[i].data.beforeProcessing;
					cur.name = docs.history[i].handler.name;
				} else {
					cur.agree = 1;
					cur.log = docs.history[i].data.log;
					cur.status = docs.history[i].data.beforeProcessing;
					cur.name = docs.history[i].handler.name;
				}
				datas.reviews.push(cur);
			}
			res.json(datas);
		});
	},
	// 编辑页面提交
	editSubmit: function(req, res) {
		// 当前purchaseDetail的_id
		let cur_id = [];
		// 数据库purchaseDetail的_id
		let db_id = [];
		// 编辑后共有的_id
		let pubArr = [];
		// 编辑后新建的_id
		let priArr = [];
		// 编辑后共有的_id对应的数据
		let pub = [];
		// 编辑后新建的_id对应的数据
		let pri = [];
		async.series([
			function(cb) {
				// 取当前的product_id数组
				req.body.details.forEach(function(item, index) {
					cur_id.push(item._id);
				});
				// 取数据库的product_id数组
				purchasePlan.findOne({
					plan_id: req.body.plan_id
				}).populate('details').exec(function(err, docs) {
					if(err) console.error(err);
					docs.details.forEach(function(item, index) {
						db_id.push(item._id.toString());
					});
					cb(null);
				});
			},
			// 删除product_id不存在的数据
			function(cb) {
				async.eachSeries(db_id, function(item, cb) {
					if(cur_id.indexOf(item) === -1) {
						purchasePlanDetail.remove({
							_id: item
						}).exec(function(err, docs) {
							if(err) console.error(err);
							cb(null);
						});
					} else {
						cb(null);
					}
				}, function(err) {
					if(err) console.error(err);
					cb(null);
				});
			},
			// 在purchasePlan删除product_id对应的pruchasePlanDetail的_id
			function(cb) {
				async.eachSeries(db_id, function(item, cb) {
					if(cur_id.indexOf(item) === -1) {
						purchasePlan.update({
							plan_id: req.body.plan_id
						}, {
							'$pull': {
								'details': item
							}
						}, function(err, docs) {
							if(err) console.error(err);
							cb(null);
						});
					} else {
						cb(null);
					}
				});
				cb(null);
			},
			// 数组处理，取交集和差集，交集(pub)update，差集(pri)create
			function(cb) {
				for(let i = 0; i < cur_id.length; i++) {
					if(db_id.indexOf(cur_id[i]) !== -1) {
						pubArr.push(cur_id[i]);
					} else {
						priArr.push(cur_id[i]);
					}
				}
				// 数据处理
				for(let i = 0; i < req.body.details.length; i++) {
					if(pubArr.indexOf(req.body.details[i]._id) !== -1) {
						let obj = {};
						obj._id = mongoose.Types.ObjectId(req.body.details[i]._id);
						obj.product_id = mongoose.Types.ObjectId(req.body.details[i].product_id);
						obj.plan_id = req.body.plan_id;
						obj.abroad_transport = req.body.details[i].abroad_transport;
						obj.advance_pay_rate = req.body.details[i].advance_pay_rate;
						obj.amount = req.body.details[i].amount;
						obj.average_7 = req.body.details[i].average_7;
						obj.average_30 = req.body.details[i].average_30;
						obj.estimate_production_days = req.body.details[i].estimate_production_days;
						obj.expected_sales = req.body.details[i].expected_sales;
						obj.fba_storage = req.body.details[i].fba_storage;
						obj.first_time = req.body.details[i].first_time;
						obj.least_amount = req.body.details[i].least_amount;
						obj.local_storage = req.body.details[i].local_storage;
						obj.local_transport = req.body.details[i].local_transport;
						obj.prepare_period = req.body.details[i].prepare_period;
						obj.purchase_amount = req.body.details[i].purchase_amount;
						obj.remarks = req.body.details[i].remarks;
						obj.safety_stock = req.body.details[i].safety_stock;
						obj.supplierId = mongoose.Types.ObjectId(req.body.details[i].supplierId);
						obj.total = req.body.details[i].total;
						obj.unit_cost = req.body.details[i].unit_cost;
						obj.updatedAt = moment().format('YYYY-MM-DD HH:mm:ss');
						pub.push(obj);
					}
					if(priArr.indexOf(req.body.details[i]._id) !== -1) {
						let obj = {};
						obj._id = new mongoose.Types.ObjectId();
						obj.product_id = mongoose.Types.ObjectId(req.body.details[i].product_id);
						obj.plan_id = req.body.plan_id;
						obj.abroad_transport = req.body.details[i].abroad_transport;
						obj.advance_pay_rate = req.body.details[i].advance_pay_rate;
						obj.amount = req.body.details[i].amount;
						obj.average_7 = req.body.details[i].average_7;
						obj.average_30 = req.body.details[i].average_30;
						obj.estimate_production_days = req.body.details[i].estimate_production_days;
						obj.expected_sales = req.body.details[i].expected_sales;
						obj.fba_storage = req.body.details[i].fba_storage;
						obj.first_time = req.body.details[i].first_time;
						obj.least_amount = req.body.details[i].least_amount;
						obj.local_storage = req.body.details[i].local_storage;
						obj.local_transport = req.body.details[i].local_transport;
						obj.prepare_period = req.body.details[i].prepare_period;
						obj.purchase_amount = req.body.details[i].purchase_amount;
						obj.remarks = req.body.details[i].remarks;
						obj.safety_stock = req.body.details[i].safety_stock;
						obj.supplier = mongoose.Types.ObjectId(req.body.details[i].supplierId);
						obj.total = req.body.details[i].total;
						obj.unit_cost = req.body.details[i].unit_cost;
						obj.updatedAt = moment().format('YYYY-MM-DD HH:mm:ss');
						obj.createdAt = moment().format('YYYY-MM-DD HH:mm:ss');
						pri.push(obj);
					}
				}
				cb(null);
			},
			// 将共有的数据进行更新
			function(cb) {
				async.eachSeries(pub, function(item, cb) {
					purchasePlanDetail.update({
						_id: mongoose.Types.ObjectId(item._id)
					}, item, function(err, docs) {
						if(err) console.error(err);
						cb(null);
					});
				}, function(err) {
					if(err) console.error(err);
					cb(null);
				});
			},
			// 将新建的数据进行创建
			function(cb) {
				async.eachSeries(pri, function(item, cb) {
					purchasePlanDetail.create(item, function(err, docs) {
						if(err) console.error(err);
						purchasePlan.update({
							plan_id: req.body.plan_id
						}, {
							$addToSet: {
								'details': item._id
							}
						}, function(err, docs) {
							if(err) console.error(err);
							cb(null);
						});
					});
				}, function(err) {
					if(err) console.error(err);
					cb(null);
				});
			},
			// 更新状态
			function(cb) {
				purchasePlan.update({
					plan_id: req.body.plan_id
				}, {
					status: req.body.status
				}, function(err, docs) {
					if(err) console.error(err);
					res.json('ok');
				});
			}
		]);
	},
	// 审核
	review: function(req, res) {
		var subfilterPurchasePlan = req.subfilterPurchasePlan || {};
		var purchasePlanConfig = req.purchasePlanConfig || [];
		let curStatus = req.body.status;
		let review = {
			data: {}
		};

        var item = {
            total: req.body.total,
            details: req.body.details,
            status: curStatus
        };

		let thisConfig = procedure(item, purchasePlanConfig);

		if(parseInt(req.body.review.agree) === 1) {
			if(thisConfig.statuses.indexOf(curStatus) !== -1) {
				if(thisConfig.statuses.length === thisConfig.statuses.indexOf(curStatus) + 1) {
					review.data.afterProcessing = 400;
				} else if(curStatus === 200) {
					review.data.afterProcessing = 210;
				} else {
					review.data.afterProcessing = thisConfig.statuses[thisConfig.statuses.indexOf(curStatus) + 1];
				}
			} else if(curStatus === 101) {
				review.data.afterProcessing = 200;
			} else {
				throw new Error('status error');
			}
		} else {
			review.data.afterProcessing = 101;
		}
		review.data.beforeProcessing = curStatus;
		review.data.log = req.body.review.remark;
		review.handler = mongoose.Types.ObjectId(req.agent.id);
		review.time = moment().format('YYYY-MM-DD HH:mm:ss');
		purchasePlan.update({
			plan_id: req.body.plan_id
		}, {
			status: review.data.afterProcessing,
			'$push': {
				'history': review
			},
			updatedAt: moment().format('YYYY-MM-DD HH:mm:ss')
		}, function(err, docs) {
			if(err) console.error(err);
			res.send(true);
		});
	}
};