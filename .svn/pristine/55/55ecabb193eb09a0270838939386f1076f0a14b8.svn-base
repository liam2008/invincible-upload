const fs = require("fs");
const moment = require('moment');
const multiparty = require('multiparty');

module.exports = {
	name: "files",

	List: function(req, res) {
		const filesList = [];
		const pagination = [];
		const uploadDir = 'public/';
		const typeDir = req.query.type || '';
		const keyword = req.query.keyword || '';
		const pageSize = parseInt(req.query.pageSize) || 10;
		const currentPage = parseInt(req.query.currentPage) || 1;
		fs.readdir(uploadDir, function(err, dir) {
			for(let i = 0; i < dir.length; i++) {
				if(fs.statSync(uploadDir + dir[i]).isDirectory()) {
					let files = fs.readdirSync(uploadDir + dir[i]);
					for(let j = 0; j < files.length; j++) {
						let stat = fs.statSync(uploadDir + dir[i] + '/' + files[j]);
						filesList.splice(0, 0, {
							type: dir[i],
							name: files[j],
							size: Math.round(stat['size'] / 1024) + 'KB',
							path: dir[i] + '/' + files[j],
							time: moment(stat['birthtime']).format('YYYY-MM-DD HH:mm:ss')
						})
					}
				}
			};
			for(let i = (currentPage - 1) * pageSize; i < currentPage * pageSize; i++) {
				let item = filesList[i];
				if(item) {
					if(item['type'].indexOf(typeDir) != -1) {
						if(item['name'].indexOf(keyword) != -1) {
							pagination.push(item)
						}
					}
				}
			};
			res.send({
				results: pagination,
				pageSize: pageSize,
				currentPage: parseInt(currentPage),
				pageCount: Math.ceil(pagination.length / pageSize)
			})
		})
	},

	Upload: function(req, res) {
		const form = new multiparty.Form({
			uploadDir: 'public/'
		});
		form.parse(req, function(err, fields, files) {
			let file = files['file'][0];
			let filePath = file.path;
			let fileName = file.originalFilename;
			let fileType = file.originalFilename.substr(file.originalFilename.lastIndexOf('.') + 1, 3);
			if(!fs.existsSync(form.uploadDir + fileType)) fs.mkdirSync(form.uploadDir + fileType);
			if(fs.existsSync(form.uploadDir + fileType + '/' + fileName)) fileName = '复件_' + moment().format('YYYYMMDDhmmss') + '_' + fileName;
			fs.renameSync(filePath, form.uploadDir + fileType + '/' + fileName);
			res.send({
				type: fileType,
				name: fileName,
				path: fileType + '/ ' + fileName,
				size: Math.round(file['size'] / 1024) + 'KB',
				time: moment().format('YYYY-MM-DD HH:mm:ss')
			})
		})
	},

	Update: function(req, res) {
		const uploadDir = 'public/';
		const fileName = req.query.name;
		const fileType = fileName.substr(fileName.lastIndexOf('.') + 1, 3);
		const newFileName = req.query.new + '.' + fileType;
		fs.rename(uploadDir + fileType + '/' + fileName, uploadDir + fileType + '/' + newFileName, function(err) {
			if(!err) res.send(newFileName)
		})
	},

	Remove: function(req, res) {
		const uploadDir = 'public/';
		const fileName = req.query.src;
		const fileType = fileName.substr(fileName.lastIndexOf('.') + 1, 3);
		if(fs.existsSync(uploadDir + fileType + '/' + fileName)) fs.unlinkSync(uploadDir + fileType + '/' + fileName);
		if(fs.existsSync(uploadDir + fileType)) {
			if(!fs.readdirSync(uploadDir + fileType).length) fs.rmdirSync(uploadDir + fileType);
		};
		res.send(fileName)
	}

}