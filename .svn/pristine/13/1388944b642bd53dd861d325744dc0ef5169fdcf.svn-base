/*
 * Base Dependencies
 */


/*
 * Server Dependencies
 */
var debug = require('debug')('smartdo:controller:daily');
var ServerError = require('../errors/server-error');
var uuid = require('uuid');
var table = require('../utils/table-utils');
var async = require('async');
var moment = require('moment');
var UUID = require('uuid');
var DB = require('../models/invincible');
var Product = DB.getModel('product');
var DailySell = DB.getModel('daily_sell');
var Merchandise = DB.getModel('merchandise');
var Shops = DB.getModel('shops');
/*
 * UModules Dependencies
 */

module.exports = {
    name: "daily",

    list: function (req, res, next) {
        var results = [];
        var nowMoment = moment();
        var subDays = 1;
        if (nowMoment.format('HH') < 17) {
            subDays = 2;
        }

        var date = req.query.timeRange || moment().subtract(subDays, 'days').format("YYYY-MM-DD") + "~" + moment().subtract(subDays, 'days').format("YYYY-MM-DD");
        var startDate = date.split('~')[0];
        var endDate = date.split('~')[1];
        var skus = [];
        var map_seller2store = {};
        var map_store2name = {};
        var map_seller2name = {};
        var map_seller2team = {};
        var map_seller2shop = {};
        var map_seller2projected = {};
        var map_seller2state = {};
        var NullshopName = false;

        async.series([
                // 找出这天的销售情况
                function (callB) {
                    DailySell.find({
                        date: {"$gte": startDate, "$lte": endDate}
                    }, function (err, findDailyResult) {
                        if (err) {
                            callB(err);
                            return;
                        }

                        findDailyResult.forEach(function (list) {
                            var seller_sku = list.seller_sku || "";
                            var asin = list.asin || "";
                            var shop_name = list.shop_name || "";
                            var key = asin + seller_sku + shop_name;
                            var num = skus.indexOf(key);
                            if (num == -1) {
                                skus.push(key);
                                results.push({
                                    asin: list.asin,
                                    name: list.name,
                                    seller_sku: list.seller_sku,
                                    sales_volume: list.sales_volume,
                                    sales_price: list.sales_price,
                                    unit_price: list.unit_price,
                                    sellable_stock: list.sellable_stock,
                                    receipting_stock: list.receipting_stock,
                                    transport_stock: list.transport_stock,
                                    shop_name: shop_name
                                });
                            } else {
                                var rowfind = results[num];
                                rowfind.sales_volume = rowfind.sales_volume + list.sales_volume;
                                rowfind.sales_price = rowfind.sales_price + list.sales_price;
                                if (list.createdAt >= rowfind.createdAt) {
                                    rowfind.unit_price = list.unit_price || rowfind.unit_price;
                                    rowfind.sellable_stock = list.sellable_stock;
                                    rowfind.receipting_stock = list.receipting_stock;
                                    rowfind.transport_stock = list.transport_stock;
                                }
                            }
                        });

                        callB(null);
                    });
                },
                // 在商品列表中 通过卖家SKU找到相应的仓库SKU、店铺名和小组名
                function (callB) {
                    Merchandise.find({}, function (err, foundResult) {
                        if (err) {
                            callB(err);
                            return;
                        }

                        for (var i = 0; i < foundResult.length; i++) {
                            var row = foundResult[i];
                            var asin = row.asin || "";
                            var seller_sku = row.seller_sku || "";
                            var shop_name = row.shop_name || "";
                            var key;
                            if (startDate < "2017-10-11") {
                                key = asin + seller_sku;
                                map_seller2shop[key] = row.shop_name;
                                NullshopName = true;
                            } else {
                                key = asin + seller_sku + shop_name;
                            }
                            map_seller2store[key] = row.store_sku;
                            map_seller2team[key] = row.team_name;
                            map_seller2projected[key] = row.projected_sales;
                            map_seller2state[key] = row.state;
                        }

                        callB(null);
                    });
                },
                // 在产品列表中 找出仓库sku和中文名的对应表
                function (callB) {
                    Product.find({}, function (err, foundResult) {
                        if (err) {
                            callB(err);
                            return;
                        }

                        for (var i = 0; i < foundResult.length; i++) {
                            var row = foundResult[i];
                            map_store2name[row.store_sku] = row.name_cn;
                        }

                        callB(null);
                    });
                },

                // 销售情况中加上中文名和仓库SKU
                function (callB) {
                    for (var sell_sku in map_seller2store) {
                        map_seller2name[sell_sku] = map_store2name[map_seller2store[sell_sku]];
                    }

                    for (var i = 0; i < results.length; i++) {
                        var row = results[i];
                        var asin = row.asin || "";
                        var seller_sku = row.seller_sku || "";
                        var shop_name = row.shop_name || "";
                        var key = asin + seller_sku + shop_name;
                        row.name = map_seller2name[key] || "";
                        row.store_sku = map_seller2store[key] || "";
                        row.team_name = map_seller2team[key] || "";
                        row.projected_sales = map_seller2projected[key] || 0;
                        row.state = map_seller2state[key] || 0;
                        if (NullshopName) {
                            row.shop_name = map_seller2shop[key] || "";
                        }
                    }
                    callB(null);
                }
            ],
            function (err, result) {
                if (err) {
                    debug(new Error(err));
                    return;
                }
                var sendResult = {
                    results: results,
                    reportDate: date
                };

                res.success(sendResult);
            }
        );
    },

    saveDailySell: function (req, res, next) {
        var date = req.body.time;
        var shopName = req.body.shopName;
        var arr = req.body.dataList || [];

        var iterator = function (json, cb) {
            if (json == null || json.asin == null || json.asin == "") {
                cb(null);
                return;
            }

            var asin = json.asin;
            var seller_sku = json.seller_sku;

            var salesNeedSave = true;

            //正常数据 往下走
            async.series([
                    // 检查销售表有没有相关信息 ASIN 和 日期
                    function (callB) {
                        DailySell.find({
                            shopName: shopName,
                            seller_sku: seller_sku,
                            date: date
                        }, function (err, findDailyResult) {
                            if (err) {
                                callB(err);
                                return;
                            }

                            if (findDailyResult.length > 0) {
                                salesNeedSave = false;
                            }

                            callB(null);
                        });
                    },
                    // 如果需要保存销售信息 salesNeedSave == true 则保存一下销售信息
                    function (callB) {
                        if (salesNeedSave) {
                            if(!parseInt(json.unit_price.substring(0,1))) json.unit_price = json.unit_price.substring(1, json.unit_price.length);
                            if(!parseInt(json.sales_price.substring(0,1))) json.sales_price = json.sales_price.substring(1, json.sales_price.length);
                            if(json.sales_price.indexOf(",") != -1) json.sales_price = json.sales_price.replace(/,/g, "");
                            json.sales_volume = Number(json.sales_volume);
                            json.unit_price = Number(json.unit_price);
                            json.sales_price = Number(json.sales_price);
                            json.sellable_stock = Number(json.sellable_stock);
                            json.receipting_stock = Number(json.receipting_stock);
                            json.transport_stock = Number(json.transport_stock);
                            var time = moment().format('YYYY-MM-DD HH:mm:ss');

                            var newSell = new DailySell({
                                asin: asin,
                                seller_sku: seller_sku,
                                date: date,
                                sales_volume: json.sales_volume,
                                unit_price: json.unit_price,
                                sales_price: json.sales_price,
                                sellable_stock: json.sellable_stock,
                                receipting_stock: json.receipting_stock,
                                transport_stock: json.transport_stock,
                                createdAt: time,
                                updatedAt: time,
                                shop_name: shopName
                            });

                            newSell.save(function (err) {
                                if (err) {
                                    callB(err);
                                    return;
                                }

                                callB(null);
                            });
                        } else {
                            callB(null);
                        }
                    }
                ],
                function (err) {
                    if (err) {
                        cb(err);
                        return;
                    }
                    cb(null);
                }
            );
        };

        async.eachSeries(arr, iterator, function (err) {
            if (err != null) {
                console.log(err);
                return;
            }
            res.success('');
        });
    },

    report: function (req, res, next) {
        Merchandise.find({}, function (err, merchandiseFound) {
            if (err) {
                debug(new Error(err));
                return;
            }
            var row;
            var asins = {};
            var resultPrice = {};
            var resultCount = {};
            var resultYesPrice = {};
            var resultYesCount = {};
            var resultAveragePrice = {};
            var resultAverageCount = {};
            var monthAllPrice = {};
            var monthAllCount = {};
            var lineDatePrice = {};
            var lineDateCount = {};
            var barData = [];
            var nowMonthStart = 0;
            var stockLoss = {};

            var key;
            var state = {};

            var subDay = 0;

            var Moment = function() {
                var now;
                if (req.query.time) {
                    now = moment(req.query.time);
                }else{
                    now = moment();
                    subDay = 1;
                    if(moment().format('HH') < 17){
                        subDay = 2;
                    }
                }
                return now;
            };

            var date = Moment().subtract(subDay, 'day').format('YYYY-MM-DD');
            var yesDate = Moment().subtract(subDay + 1, 'day').format('YYYY-MM-DD');
            var date30Ago = Moment().subtract(subDay + 29, 'day').format('YYYY-MM-DD');
            var line60DateMoment = Moment().subtract(subDay + 59, 'day');
            var line60Date = line60DateMoment.format('YYYY-MM-DD');
            var startMonthMoment = Moment().startOf('month');
            var startMonthDate = startMonthMoment.format('YYYY-MM-DD');
            var endMonthMoment = Moment().endOf('month');
            var endMonthDate = endMonthMoment.format('YYYY-MM-DD');

            for(var b = 0;b < endMonthMoment.format('DD');b++){
                barData[b] = {};
                barData[b].y = 0;
                barData[b].date = startMonthMoment.format('YYYY-MM-DD');
                barData[b].monthAllSales = 0;
                startMonthMoment.add(1, 'day');
            }
            for (var i = 0; i < merchandiseFound.length; i++) {
                row = merchandiseFound[i];
                if (moment("2017-10-11").format('YYYY-MM-DD') > endMonthDate) {
                    key = row.asin.toString() + row.seller_sku.toString();
                    asins[key] = row.team_name;
                    state[key] = row.state;
                }if (moment("2017-10-11").format('YYYY-MM-DD') <= line60Date) {
                    key = row.asin.toString() + row.seller_sku.toString() + row.shop_name.toString();
                    asins[key] = row.team_name;
                    state[key] = row.state;
                }else{
                    key = row.asin.toString() + row.seller_sku.toString() + row.shop_name.toString();
                    asins[key] = row.team_name;
                    state[key] = row.state;
                    key = row.asin.toString() + row.seller_sku.toString();
                    asins[key] = row.team_name;
                    state[key] = row.state;
                }
            }

            lineDatePrice.time = [];
            lineDateCount.time = [];
            var line60EachDate = line60DateMoment.format("YYYY-MM-DD");
            while(line60EachDate <= endMonthDate) {
                lineDatePrice.time.push(line60EachDate);
                lineDateCount.time.push(line60EachDate);
                if(line60EachDate == startMonthDate) {
                    nowMonthStart = lineDatePrice.time.length - 1;
                }
                line60DateMoment.add(1, 'day');
                line60EachDate = line60DateMoment.format("YYYY-MM-DD");
            }

            DailySell.find({
                date: {"$gte": line60Date, "$lte": endMonthDate}
            }, function (err, DailySellFound) {
                if (err) {
                    debug(new Error(err));
                    return;
                }
                var teamName;
                var teamDate = {};
                var allTeamName = [];
                var unitPrice = {};
                var lossFindRequire = {};
                lossFindRequire.$or = [{asin: null,seller_sku: null}];


                for (var i = 0; i < DailySellFound.length; i++) {
                    row = DailySellFound[i];
                    if (row.shop_name) {
                        key = row.asin.toString() + row.seller_sku.toString() + row.shop_name.toString();
                    }else{
                        key = row.asin.toString() + row.seller_sku.toString();
                    }
                    teamName = asins[key] || "未知组";

                    if(allTeamName.indexOf(teamName) == -1) {
                        allTeamName.push(teamName);
                    }

                    if((state[key] == 2 || state[key] == 3) && row.sellable_stock == 0 && row.transport_stock == 0 && row.date == date) {
                        unitPrice[key] = row.unit_price;
                        if (date < "2017-10-11") {
                            lossFindRequire.$or.push({asin:row.asin.toString(),seller_sku:row.seller_sku.toString()});
                        }else{
                            lossFindRequire.$or.push({asin:row.asin.toString(),seller_sku:row.seller_sku.toString(), shop_name: row.shop_name.toString()});
                        }

                    }

                    //30Date
                    if (date30Ago <= row.date && row.date <= date) {
                        if (!asins[key]) {
                            debug("cant find asin: %s with seller sku: %s", row.asin.toString(), row.seller_sku.toString());
                        }
                        resultAveragePrice[teamName] = resultAveragePrice[teamName] || 0;
                        resultAverageCount[teamName] = resultAverageCount[teamName] || 0;
                        resultAveragePrice[teamName] += row.sales_price;
                        resultAverageCount[teamName] += row.sales_volume;
                        if (!teamDate[teamName]) {
                            teamDate[teamName] = [];
                        }
                        if (teamDate[teamName].indexOf(row.date) == -1)teamDate[teamName].push(row.date);

                        resultPrice[teamName] = resultPrice[teamName] || 0;
                        resultCount[teamName] = resultCount[teamName] || 0;
                        if (row.date == date) {
                            resultPrice[teamName] += row.sales_price;
                            resultCount[teamName] += row.sales_volume;
                        }

                        resultYesPrice[teamName] = resultYesPrice[teamName] || 0;
                        resultYesCount[teamName] = resultYesCount[teamName] || 0;
                        if (row.date == yesDate) {
                            resultYesPrice[teamName] += row.sales_price;
                            resultYesCount[teamName] += row.sales_volume;
                        }
                    }

                    //monthDate
                    if (startMonthDate <= row.date && row.date <= endMonthDate) {
                        if(row.date <= date) {
                            monthAllPrice[teamName] = monthAllPrice[teamName] || 0;
                            monthAllPrice[teamName] += row.sales_price;
                            monthAllCount[teamName] = monthAllCount[teamName] || 0;
                            monthAllCount[teamName] += row.sales_volume;
                        }

                        for (var l = 0; l <= barData.length; l++) {
                            if (barData[l].date == row.date) {
                                barData[l].y = barData[l].y || 0;
                                barData[l].y += row.sales_price;
                                break;
                            }
                        }
                    }

                    //lineDate
                    if (teamName != "未知组") {
                        if(!lineDatePrice[teamName]) {
                            lineDatePrice[teamName] = [];
                            lineDateCount[teamName] = [];
                        }
                        for (var j = 0; j < lineDatePrice.time.length; j++) {
                            if ((lineDatePrice.time)[j] == row.date) {
                                lineDatePrice[teamName][j] = lineDatePrice[teamName][j] || 0;
                                lineDatePrice[teamName][j] += row.sales_price;
                                lineDateCount[teamName][j] = lineDateCount[teamName][j] || 0;
                                lineDateCount[teamName][j] += row.sales_volume;
                                break;
                            }
                        }
                    }
                }

                var num = {};

                for (teamName in resultAveragePrice) {
                    num[teamName] = teamDate[teamName].length;
                    if (resultAveragePrice[teamName]) {
                        resultAveragePrice[teamName] = resultAveragePrice[teamName] / num[teamName];
                    }
                    if (resultAverageCount[teamName]) {
                        resultAverageCount[teamName] = resultAverageCount[teamName] / num[teamName];
                    }
                }

                for (var m = 0; m < barData.length; m++) {
                    if(barData[m].y != 0){
                        for (var n = 0; n <= m; n++) {
                            barData[m].monthAllSales += barData[n].y;
                        }
                    }
                    barData[m].y = parseFloat(barData[m].y.toFixed(2));
                    barData[m].monthAllSales = parseFloat(barData[m].monthAllSales.toFixed(2));
                }

                for (teamName in monthAllPrice) {
                    monthAllPrice[teamName] = parseFloat(monthAllPrice[teamName].toFixed(2));
                }


                for (var lineDateMonthTeam in lineDatePrice) {
                    if (lineDateMonthTeam != "time") {
                        for(var c = lineDatePrice.time.length - 1;c >= 0;c--) {
                            if(lineDatePrice[lineDateMonthTeam][c]){
                                lineDatePrice[lineDateMonthTeam][c] = parseFloat(lineDatePrice[lineDateMonthTeam][c].toFixed(2));
                            }else{
                                lineDatePrice[lineDateMonthTeam][c] = null;
                            }
                        }
                    }
                }
                for (var lineDateMonthTeam in lineDateCount) {
                    if (lineDateMonthTeam != "time") {
                        for(var d = lineDateCount.time.length - 1;d >= 0;d--) {
                            if(!lineDateCount[lineDateMonthTeam][d]){
                                lineDateCount[lineDateMonthTeam][d] = null;
                            }
                        }
                    }
                }
                var num2 = {};
                var dateCount = {};
                var lossVolume = {};
                lossFindRequire.date = {};
                lossFindRequire.date.$gte = moment(date).subtract(2, 'day').format('YYYY-MM-DD');
                lossFindRequire.date.$lte = date;
                DailySell.find(lossFindRequire, function (err, lossList) {
                    if (lossList.length > 0) {
                        var key2;
                        lossList.forEach(function (loss) {
                            if (loss.shop_name) {
                                key2 = loss.asin.toString() + loss.seller_sku.toString() + loss.shop_name.toString();
                            }else {
                                key2 = loss.asin.toString() + loss.seller_sku.toString();
                            }
                            lossVolume[key2] = lossVolume[key2] || 0;
                            lossVolume[key2] += loss.sales_volume;
                            dateCount[key2] = dateCount[key2] || [];
                            if (dateCount[key2].indexOf(loss.date) == -1) dateCount[key2].push(loss.date);
                            num2[key2] = dateCount[key2].length;
                        });
                        for(var lossKey in unitPrice){
                            stockLoss[asins[lossKey]] = stockLoss[asins[lossKey]] || 0;
                            stockLoss[asins[lossKey]] += unitPrice[lossKey] * (lossVolume[lossKey] / num2[lossKey]);
                        }
                    }
                    allTeamName.forEach(function (TeamName) {
                        if(stockLoss[TeamName]) {
                            stockLoss[TeamName] = stockLoss[TeamName].toFixed(2);
                        }
                    });

                    var relativelyYesPercentPrice;
                    var relativelyYesPercentCount;

                    for (var c = 0; c < allTeamName.length; c++) {
                        for (var d = c; d < allTeamName.length; d++) {
                            if (resultPrice[allTeamName[c]] < resultPrice[allTeamName[d]] || typeof(resultPrice[allTeamName[c]]) == "undefined") {
                                var temp = allTeamName[c];
                                allTeamName[c] = allTeamName[d];
                                allTeamName[d] = temp;
                            }
                        }
                    }

                    var sendResult = [];
                    allTeamName.forEach(function(teamName) {
                        if(resultYesPrice[teamName] == 0) {
                            relativelyYesPercentPrice = 0;
                        }else{
                            relativelyYesPercentPrice = (resultPrice[teamName] - resultYesPrice[teamName]) / resultYesPrice[teamName];
                        }
                        if(resultYesCount[teamName] == 0) {
                            relativelyYesPercentCount = 0;
                        }else{
                            relativelyYesPercentCount = (resultCount[teamName] - resultYesCount[teamName]) / resultYesCount[teamName];
                        }
                        sendResult.push({
                            teamName: teamName,
                            averageSales: resultAveragePrice[teamName] || 0,
                            averageCount: resultAverageCount[teamName] || 0,
                            relativelyYesMultiplicationPrice: (resultPrice[teamName] - resultYesPrice[teamName]) || 0,
                            relativelyYesPercentPrice: relativelyYesPercentPrice || 0,
                            relativelyYesMultiplicationCount: (resultCount[teamName] - resultYesCount[teamName]) || 0,
                            relativelyYesPercentCount: relativelyYesPercentCount || 0,
                            dailySales: resultPrice[teamName] || 0,
                            dailyCount: resultCount[teamName] || 0,
                            monthSales: monthAllPrice[teamName] || 0,
                            monthCount: monthAllCount[teamName] || 0,
                            stockLoss: stockLoss[teamName] || "-"
                        })
                    });
                    function objKeySort(obj) {//排序的函数
                        var newkey = Object.keys(obj).sort();
                        //先用Object内置类的keys方法获取要排序对象的属性名，再利用Array原型上的sort方法对获取的属性名进行排序，newkey是一个数组
                        var newObj = {};//创建一个新的对象，用于存放排好序的键值对
                        for (var i = 0; i < newkey.length; i++) {//遍历newkey数组
                            newObj[newkey[i]] = obj[newkey[i]];//向新创建的对象中按照排好的顺序依次增加键值对
                        }
                        return newObj;//返回排好序的新对象
                    }
                    lineDatePrice = objKeySort(lineDatePrice);
                    lineDateCount = objKeySort(lineDateCount);

                    var sendResult = {
                        result: sendResult,
                        date: date,
                        lineDatePrice: lineDatePrice,
                        lineDateCount: lineDateCount,
                        barData: barData,
                        teamName2: req.query.teamName2 || [],
                        nowMonthStart: nowMonthStart
                    };

                    res.success(sendResult);
                });
            });
        })
    },

    import: function (req, res, next) {
        Shops.distinct("name", function (err, shopNames) {
            if (err) {
                debug(err);
                res.success();
                return;
            }
            shopNames.sort();

            res.success(shopNames);
        });
    },

    PopupList: function (req, res, next) {
        var results = [];
        var date = req.query.time;
        var teamName = req.query.teamName;
        if(teamName == "未知组") teamName = null;
        var map_seller2store = {};
        var map_store2name = {};
        var map_seller2name = {};
        var map_seller2team = {};
        var map_seller2shop = {};
        var map_seller2projected = {};
        var map_seller2state = {};
        var lossFindRequire = {};
        var lossVolume = {};
        lossFindRequire.$or = [];
        lossFindRequire.date = {};
        lossFindRequire.date.$gte = moment(date).subtract(2, 'day').format('YYYY-MM-DD');
        lossFindRequire.date.$lte = date;
        var stockLoss = {};
        var NullshopName = false;

        async.series([
                // 在商品列表中 通过卖家SKU找到相应的仓库SKU、店铺名和小组名
                function (callB) {
                    Merchandise.find({team_name:teamName, state:{$in:[2,3]}}, function (err, foundResult) {
                        if (err) {
                            callB(err);
                            return;
                        }

                        for (var i = 0; i < foundResult.length; i++) {
                            var row = foundResult[i];
                            var asin = row.asin || "";
                            var seller_sku = row.seller_sku || "";
                            var shop_name = row.shop_name || "";
                            var key;
                            if (date < "2017-10-11") {
                                key = asin + seller_sku;
                                map_seller2shop[key] = row.shop_name;
                                NullshopName = true;
                            } else {
                                key = asin + seller_sku + shop_name;
                            }
                            map_seller2store[key] = row.store_sku;
                            map_seller2team[key] = row.team_name;
                            map_seller2projected[key] = row.projected_sales;
                            map_seller2state[key] = row.state;
                            lossFindRequire.$or.push({asin: asin,seller_sku: seller_sku})
                        }
                        callB(null);
                    });
                },
                // 找出这天的销售情况
                function (callB) {
                    var num2 = {};
                    var dateCount = {};

                    DailySell.find(lossFindRequire, function (err, lossList) {
                        var key2;
                        lossList.forEach(function (loss) {
                            if (loss.shop_name) {
                                key2 = loss.asin.toString() + loss.seller_sku.toString() + loss.shop_name.toString();
                            }else {
                                key2 = loss.asin.toString() + loss.seller_sku.toString();
                            }
                            lossVolume[key2] = lossVolume[key2] || 0;
                            lossVolume[key2] += loss.sales_volume;
                            dateCount[key2] = dateCount[key2] || [];
                            if (dateCount[key2].indexOf(loss.date) == -1) dateCount[key2].push(loss.date);
                            num2[key2] = dateCount[key2].length;

                            if (loss.date == date && loss.sellable_stock == 0 && loss.transport_stock == 0) {
                                results.push({
                                    asin: loss.asin,
                                    seller_sku: loss.seller_sku,
                                    unit_price: loss.unit_price,
                                    sellable_stock: loss.sellable_stock,
                                    receipting_stock: loss.receipting_stock,
                                    transport_stock: loss.transport_stock,
                                    shop_name: loss.shop_name
                                });
                            }
                        });
                        results.forEach(function (result){
                            var lossKey = result.asin + result.seller_sku + result.shop_name;
                            stockLoss[lossKey] = stockLoss[lossKey] || 0;
                            stockLoss[lossKey] += result.unit_price * (lossVolume[lossKey] / num2[lossKey]);
                        });
                        for(var key in stockLoss) {
                            stockLoss[key] = stockLoss[key].toFixed(2);
                        }
                        callB(null);
                    });
                },

                // 在产品列表中 找出仓库sku和中文名的对应表
                function (callB) {
                    Product.find({}, function (err, foundResult) {
                        if (err) {
                            callB(err);
                            return;
                        }

                        for (var i = 0; i < foundResult.length; i++) {
                            var row = foundResult[i];
                            map_store2name[row.store_sku] = row.name_cn;
                        }

                        callB(null);
                    });
                },

                // 销售情况中加上中文名和仓库SKU
                function (callB) {
                    for (var sell_sku in map_seller2store) {
                        map_seller2name[sell_sku] = map_store2name[map_seller2store[sell_sku]];
                    }

                    for (var i = 0; i < results.length; i++) {
                        var row = results[i];
                        var asin = row.asin || "";
                        var seller_sku = row.seller_sku || "";
                        var shop_name = row.shop_name || "";
                        var key = asin + seller_sku + shop_name;
                        row.name = map_seller2name[key] || "";
                        row.store_sku = map_seller2store[key] || "";
                        row.team_name = map_seller2team[key] || "";
                        row.projected_sales = map_seller2projected[key] || 0;
                        row.state = map_seller2state[key] || 0;
                        row.averageLoss = stockLoss[key] || "-";
                        row.lossVolume = lossVolume[key] || 0;
                        if (NullshopName) {
                            row.shop_name = map_seller2shop[key] || "";
                        }
                    }
                    callB(null);
                }
            ],
            function (err, result) {
                if (err) {
                    debug(new Error(err));
                    return;
                }
                res.success(results);
            }
        );
    }
};
