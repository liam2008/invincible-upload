var debug = require('debug')('smartdo:controller:base');
var ServerError = require('../errors/server-error');
var fs = require("fs");
var moment = require('moment');
var UUID = require('uuid');
var DB = require('../models/invincible');
var Merchandise = DB.getModel('merchandise');
var Product = DB.getModel('product');
var StoreJournals = DB.getModel('StoresJournals');
var Shops = DB.getModel('shops');
var mongoose = require('mongoose');
var async = require('async');

var Shared = require('../../shared/');
var ERROR_CODE = Shared.ERROR;
var MESSAGE = Shared.MESSAGE;
var Utils = Shared.Utils;
var dealErr = require('../errors/controller-error');

/*
 * UModules Dependencies
 */

module.exports = {
    name: "base",

    list: function (req, res, next) {
        var findCondition = null;
        var subFilter = req.subfilterMerchandiseEdit || {};
        if (subFilter.view == "*") {
            findCondition = {};
        }
        else if (subFilter.view != null) {
            findCondition = {team_id: subFilter.view};
        }
        else {
            res.success();
            return;
        }

        var results = [];
        findCondition.state = {$nin: [-1]};
        Merchandise.find(findCondition)
            .populate('product_id')
            .populate('shop_id')
            .populate('team_id')
            .exec(function(err, MerchandiseListResult) {
                if (dealErr.findErr(err, res)) return debug(new Error(err));
                MerchandiseListResult.forEach(function(Merchandises) {
                    var teamName = "";
                    var shop = {};
                    var productId = "";
                    var nameCN = "";
                    var storeSku = "";
                    if (Merchandises.team_id) teamName = Merchandises.team_id.name;
                    if (Merchandises.shop_id) shop = {name: Merchandises.shop_id.name, shopId: Merchandises.shop_id._id};
                    if (Merchandises.product_id) {
                        productId = Merchandises.product_id._id;
                        nameCN = Merchandises.product_id.name_cn;
                        storeSku = Merchandises.product_id.store_sku
                    }
                    var shelfTime = "";
                    if (Merchandises.shelf_time) shelfTime = moment(Merchandises.shelf_time).format("YYYY-MM-DD");
                    results.push({
                        id: Merchandises.id,
                        sellerSku: Merchandises.seller_sku,
                        storeSku: storeSku,
                        productId: productId,
                        FBA: Merchandises.FBA,
                        fnsku: Merchandises.fnsku,
                        asin: Merchandises.asin,
                        nameCN:nameCN,
                        shop: shop,
                        teamName: teamName,
                        createdAt: Merchandises.createdAt,
                        updatedAt: Merchandises.updatedAt,
                        state: Merchandises.state,
                        projectedSales: Merchandises.projected_sales,
                        price: Merchandises.price || 0,
                        shelfTime: shelfTime
                    });
                });
                Product.aggregate([
                    {$match:{}},
                    {$sort:{store_sku:1}},
                    {$group : {_id : {_id: "$_id",store_sku:"$store_sku", name_cn:"$name_cn"}}}
                ], function (err, productListResult) {
                    if (dealErr.findErr(err, res)) return debug(new Error(err));
                    var productResults = [];
                    productListResult.forEach(function (productOneResult) {
                        var prodResult = {};
                        prodResult._id = productOneResult._id._id;
                        prodResult.store_sku = productOneResult._id.store_sku;
                        prodResult.name_cn = productOneResult._id.name_cn;
                        productResults.push(prodResult);
                    });
                    Shops.aggregate([
                        {$match:{}},
                        {$sort:{name:1}},
                        {$group : {_id : {_id: "$_id", name:"$name"}}}
                    ], function (err, shopsNameResult) {
                        if (err) {
                            debug(err);
                            res.error(ERROR_CODE.NOT_EXISTS);
                            return;
                        }
                        var shopResults = [];
                        shopsNameResult.forEach(function (shopNameResult) {
                            var shopResult = {};
                            shopResult._id = shopNameResult._id._id;
                            shopResult.name = shopNameResult._id.name;
                            shopResults.push(shopResult);
                        });
                        var data = {
                            list: results,
                            stockList: productResults,
                            shopsNames: shopResults,
                            rights: {
                                edit: subFilter.edit || false,
                                add: subFilter.add || false,
                                delete: subFilter.delete || false
                            }
                        };
                        data = Utils.pakoZip(JSON.stringify(data));
                        res.success(data);
                    });
                })
            })
    },

    update: function (req, res, next) {
        var subFilter = req.subfilterMerchandiseEdit || {};
        if (subFilter.edit) {
            Merchandise.findOne({
                asin: req.body.asin,
                seller_sku: req.body.sellerSku,
                shop_id: mongoose.Types.ObjectId(req.body.shopId)
            }, function(err, MerchandiseResult) {
                if (dealErr.findErr(err, res)) return debug(new Error(err));
                if (MerchandiseResult) {
                    debug("merchandise change : "+ MerchandiseResult.asin + " " + MerchandiseResult.seller_sku + " " + MerchandiseResult.shop_name
                        + " [ projected_sales : " + MerchandiseResult.projected_sales  + " -> "  + req.body.projected_sales
                        + " price : " + MerchandiseResult.price + " -> " + req.body.price
                        + " team_name : " + MerchandiseResult.team_name + " -> " + req.body.team_name
                        + " state : " + MerchandiseResult.state + " -> " + req.body.state
                        + " ]"
                    );
                    if (req.body.productId) MerchandiseResult.product_id = mongoose.Types.ObjectId(req.body.productId);
                    MerchandiseResult.projected_sales = Utils.toNumber(req.body.projectedSales + "");
                    MerchandiseResult.price = Utils.toNumber(req.body.price + "");
                    MerchandiseResult.team_id = mongoose.Types.ObjectId(req.body.teamId);
                    MerchandiseResult.state = Utils.toNumber(req.body.state + "");
                    if (req.body.shelfTime) MerchandiseResult.shelf_time = moment(req.body.shelfTime).format('YYYY-MM-DD');
                    MerchandiseResult.updatedAt = moment().format('YYYY-MM-DD HH:mm:ss');
                    MerchandiseResult.save(function(err) {
                        if (dealErr.updateErr(err, res)) return debug(new Error(err));
                        res.success(true);
                    })
                }
            })
        }else {
            res.success();
            return;
        }
    },

    saveMerchandise: function (req, res, next) {
        var subFilter = req.subfilterMerchandiseEdit || {};
        if (subFilter.add) {
            Merchandise.findOne({
                asin: req.body.asin,
                seller_sku: req.body.sellerSku,
                shop_id: mongoose.Types.ObjectId(req.body.shopId)
            }, function(err, MerchandiseResult) {
                if (dealErr.findErr(err, res)) return debug(new Error(err));
                if (!MerchandiseResult) {
                    if (!req.body.asin || !req.body.sellerSku) {
                        res.error(ERROR_CODE.INVALID_ARGUMENT);
                        return;
                    }
                    var shelfTime;
                    if (req.body.shelfTime) shelfTime = moment(req.body.shelfTime).format('YYYY-MM-DD');
                    if (typeof (req.body.FBA) != "number") req.body.FBA = Utils.toNumber(req.body.FBA);
                    if (typeof (req.body.projectedSales) != "number") req.body.projectedSales = Utils.toNumber(req.body.projectedSales);
                    if (typeof (req.body.state) != "number") req.body.state = Utils.toNumber(req.body.state);
                    if (typeof (req.body.price) != "number") req.body.price = Utils.toNumber(req.body.price);
                    var merchandise = new Merchandise ({
                        id: UUID.v4(),
                        seller_sku: req.body.sellerSku,     // 卖家SKU
                        product_id: mongoose.Types.ObjectId(req.body.productId),     // 仓库SKU
                        FBA: req.body.FBA,     // 是否FBA 1是 0否
                        fnsku: req.body.fnsku,     // FNSKU
                        asin: req.body.asin,     // ASIN
                        name: req.body.name,     // 当地语言名字:英文\日文等
                        shop_id: mongoose.Types.ObjectId(req.body.shopId),     // 店铺名
                        team_id: mongoose.Types.ObjectId(req.body.teamId),     // 小组名
                        state: req.body.state,     // 状态 0:停售, 1:未开售, 2:推广期, 3:在售期, 4:清仓期 5:归档 6:备用
                        price: req.body.price,     // 基准价格
                        projected_sales: req.body.projectedSales,    // 预计销量
                        shelf_time: shelfTime,
                        createdAt: moment().format('YYYY-MM-DD HH:mm:ss'),
                        updatedAt: moment().format('YYYY-MM-DD HH:mm:ss')
                    });
                    merchandise.save(function(err) {
                        if (dealErr.createErr(err, res)) return debug(new Error(err));
                        res.success(true);
                    })
                }else {
                    res.success(false)
                }
            })
        }else {
            res.success();
            return;
        }
    },

    deleteMerd: function (req, res, next) {
        var subFilter = req.subfilterMerchandiseEdit || {};
        if (subFilter.delete) {
            if (!req.body.asin || !req.body.shopID || !req.body.sellerSku) {
                res.error(ERROR_CODE.MISSING_ARGUMENT);
                return;
            }
            Merchandise.findOne({
                    asin: req.body.asin,
                    seller_sku: req.body.sellerSku,
                    shop_id: mongoose.Types.ObjectId(req.body.shopID)
                }, function(err, MerchandiseResult) {
                    if (dealErr.findErr(err, res)) return debug(new Error(err));
                    if (MerchandiseResult) {
                        if (MerchandiseResult.state == 2 || MerchandiseResult.state == 3) {
                            res.error(ERROR_CODE.INVALID_ARGUMENT);
                            return;
                        }
                        MerchandiseResult.state = -1;
                        MerchandiseResult.deletedAt = moment().format("YYYY-MM-DD");
                        MerchandiseResult.save(function (err) {
                            if (dealErr.removeErr(err, res)) return debug(new Error(err));
                            res.success();
                        })
                    }else {
                        res.error(ERROR_CODE.NOT_EXISTS);
                        return;
                    }
                }
            )
        }else {
            res.success();
            return;
        }
    },

    shops: function (req, res, next) {
        Shops.find(function (err, shopsListResult) {
            if (dealErr.findErr(err, res)) return debug(new Error(err));
            var results = [];
            shopsListResult.forEach(function (shopsResult) {
                var result = {
                    id: shopsResult.id,
                    name: shopsResult.name,
                    site: shopsResult.site,
                    sellerId: shopsResult.seller_id,
                    createdAt: moment(shopsResult.createdAt).format('YYYY-MM-DD HH:mm:ss'),
                    updatedAt: moment(shopsResult.updatedAt).format('YYYY-MM-DD HH:mm:ss')
                };
                results.push(result)
            });
            res.success(results);
        })
    },

    addShops: function (req, res, next) {
        req.body.name = req.body.name.toUpperCase();
        var date = moment().format('YYYY-MM-DD HH:mm:ss');
        var names = req.body.name.split("-");
        var site = names[2];
        var newShop = new Shops({
            id: UUID.v4(),
            name: req.body.name,
            site: site,
            seller_id: req.body.sellerId,
            createdAt: date,
            updatedAt: date
        });

        newShop.save(function (err) {
            if (dealErr.createErr(err, res)) return debug(new Error(err));
            res.success();
        });
    },

    shopsOne: function (req, res, next, callback) {
        var findRequire = {};
        findRequire.id = req.body.id;
        Shops.findOne(findRequire, function(err, ShopOne) {
            callback(err, ShopOne)
        });
    },

    updateShops: function (req, res, next) {
        req.body.name = req.body.name.toUpperCase();
        require('../controllers').base.shopsOne(req, res, next, function(err, ShopsOne) {
            if (dealErr.findErr(err, res)) return debug(new Error(err));
            var name = req.body.name;
            ShopsOne.name = req.body.name;
            ShopsOne.site = (name.split("-"))[2];
            ShopsOne.seller_id = req.body.sellerId;
            ShopsOne.updatedAt = moment().format('YYYY-MM-DD HH:mm:ss');
            ShopsOne.save(function (err) {
                if (dealErr.updateErr(err, res)) return debug(new Error(err));
                res.success();
            });
        })
    },

    //Product货品
    saveProduct: function (req, res, next) {
        var time = moment().format('YYYY-MM-DD HH:mm:ss');
        var product = new Product({
            id: UUID.v4(),                                           // id 使用UUID
            store_sku: req.body.store_sku,                    // 仓库SKU
            name_cn: req.body.name_cn,                              // 英文名
            createdAt: time,                           // 创建时间
            updatedAt: time                           // 修改时间
        });
        product.save(function (err) {
            if (dealErr.createErr(err, res)) return debug(new Error(err));
            res.success(true);
        });
    },

    updateProduct: function (req, res, next) {
        if (req.body.id) {
            require('../controllers').base.ProductOne(req.body.id, function (err, productOne) {
                if (err) {
                    debug(err);
                    return;
                }
                if(productOne) {
                    var time = moment().format('YYYY-MM-DD HH:mm:ss');
                    productOne.store_sku = req.body.store_sku;
                    productOne.name_cn = req.body.name_cn;                              // 英文名
                    productOne.updatedAt = time;                           // 修改时间
                    productOne.save(function (err) {
                        if (dealErr.findErr(err, res)) return debug(new Error(err));
                        res.success(true);
                    });
                }else {
                    res.success(false);
                }
            })
        }else {
            res.error(ERROR_CODE.NOT_EXISTS);
        }
    },

    listProduct: function (req, res, callback) {
        var results = [];
        StoreJournals.aggregate([
            {$match:{}},
            {$sort:{updatedAt:-1}},
            {$group : {_id : "$id", stock: {$first: "$stock"}, unit: {$first: "$unit"}}}
        ], function (err, storeListResult) {
            if (err) {
                debug(err);
                res.error(ERROR_CODE.FIND_FAILED);
                return;
            }
            var  storesNum = {};
            for (var j = 0;j < storeListResult.length; j++) {
                var row = storeListResult[j];
                var key = row._id;
                storesNum[key] = j
            }
            Product.find({}).sort({sku: 1}).exec(function (err, productListResult) {
                if (dealErr.findErr(err, res)) return debug(new Error(err));
                for (var i = 0; i < productListResult.length; i++) {
                    var rowProduct = productListResult[i];
                    var key = rowProduct.id;
                    var rowStore = storeListResult[storesNum[key]] || {};
                    var unit =  rowStore.unit || "";
                    var stock = rowStore.stock || "";
                    var result = {
                        id: rowProduct.id,
                        store_sku: rowProduct.store_sku,
                        name_cn: rowProduct.name_cn,
                        unit: unit,
                        stock: stock
                    };
                    results.push(result)
                }
                for (var a = 0; a < results.length; a++) {
                    if (results[a].stock == "") {
                        for (var b = a + 1; b< results.length; b++) {
                            if (results[b].stock != "") {
                                var temp = results[a];
                                results[a] = results[b];
                                results[b] = temp;
                                break;
                            }
                        }
                    }
                }
                var stockList = {stockList: results};
                stockList = Utils.pakoZip(JSON.stringify(stockList));
                res.success(stockList);
            })
        });

    },

    removeProduct: function (req, res, next) {
        // Product.remove({
        //     store_sku: req.body.store_sku
        // }, function (err) {
        //     if (err) {
        //         return err;
        //     }
        // });

        res.success();
    },

    ProductOne: function (id, callback) {
        var require = {};
        require.id = id;
        Product.findOne(require, function (err, productOne) {
            if (err) {
                return callback(err, null);
            }
            return callback(err, productOne);
        });
    },

    StoreJournal: function (req, res, next) {
        var require = {};
        var results = {};
        var id2sku = {};
        var id2nameCN = {};
        var subDay = 0;
        var Moment = function() {
            var now;
            if (req.query.time) {
                now = moment(req.query.time);
            }else{
                now = moment();
                subDay = 1;
                if(moment().format('HH') < 17){
                    subDay = 2;
                }
            }
            return now;
        };

        var date = Moment().subtract(subDay, 'day').format('YYYY-MM-DD');
        var startTime = req.body.startTime || date;
        var endTime = req.body.endTime || date;
        async.series([
                function (callB) {
                    Merchandise.find({})
                        .populate("product_id")
                        .exec(function (err, MerchandiseFounds) {
                            if (dealErr.findErr(err, res)) return callB(err);
                            MerchandiseFounds.forEach (function (MerchandiseFound) {
                                id2sku[MerchandiseFound.id] = MerchandiseFound.store_sku;
                                id2nameCN[MerchandiseFound.id] = MerchandiseFound.name_cn;
                            });
                            callB(null);
                        })
                },

                function (callB) {
                    require.id = req.body.id;
                    require.time = {};
                    require.time.$gte = startTime;
                    require.time.$lte = req.body.endTime || date;
                    StoreJournals.find(require).sort({updatedAt:-1}).exec(function (err, StoreJournalList) {
                        if (dealErr.findErr(err, res)) return callB(err);
                        for (var m = 0 ; m < StoreJournalList.length; m++) {
                            StoreJournalList[m].sku = id2sku[StoreJournalList[m].id];
                            StoreJournalList[m].name = id2nameCN[StoreJournalList[m].id];
                        }
                        results.storeJournalList = StoreJournalList;
                        results.startTime = startTime;
                        results.endTime = endTime;
                        res.success(results);
                        callB(null);
                    });
                }
            ],
            function (err) {
                if (err) {
                    debug(new Error(err));
                    return;
                }
            }
        );
    }
};
